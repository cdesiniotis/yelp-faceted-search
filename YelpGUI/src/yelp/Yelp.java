/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package yelp;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
//import javax.swing.DefaultListCellRenderer;

/**
 *
 * @author chris
 */
public class Yelp extends javax.swing.JFrame {
    private Object connection;

    /**
     * Creates new form Form
     */
    public Yelp() throws SQLException {
        initComponents();
        
        // Main Categories
        mainCategoryItems = new JPanel();
        mainCategoryItems.setLayout(new BoxLayout(mainCategoryItems,BoxLayout.Y_AXIS));
        mainCategoryItems.setBackground(new Color(255,255,255));
        initMainCategories();
        mainCategoryList.setViewportView(mainCategoryItems);
        
        // Sub Categories
        subCategoryItems = new JPanel();
        subCategoryItems.setLayout(new BoxLayout(subCategoryItems,BoxLayout.Y_AXIS));
        subCategoryItems.setBackground(new Color(255,255,255));
        //subCategoryPanel.add(subCategoryItems);
        subCategoryList.setViewportView(subCategoryItems);
        
        // Attributes
        attributeItems = new JPanel();
        attributeItems.setLayout(new BoxLayout(attributeItems,BoxLayout.Y_AXIS));
        attributeItems.setBackground(new Color(255,255,255));
        attributeList.setViewportView(attributeItems);
        
        // Search For Box
        searchFor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AND", "OR" }));
        if (searchFor.getSelectedItem() == "OR") {
            searchForPolicy = "UNION";
        } else {
            searchForPolicy = "INTERSECT";
        }
                
        // Location Box
        locationBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"None"}));
        locationBox.setSelectedIndex(-1);
        
        // Days Box
        daysBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"None"}));
        daysBox.setSelectedIndex(-1);
        
        // From Box
        fromBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"None"}));
        fromBox.setSelectedIndex(-1);
        
        // To Box
        toBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"None"}));
        toBox.setSelectedIndex(-1);
        
        // Business Results Table
        JTable businessTable = new JTable(new String[0][4], columnNames);
        resultsScrollPane.setViewportView(businessTable);
        resultsScrollPane.updateUI();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        guiPanel = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        searchFor = new javax.swing.JComboBox();
        locationBox = new javax.swing.JComboBox();
        daysBox = new javax.swing.JComboBox();
        fromBox = new javax.swing.JComboBox();
        toBox = new javax.swing.JComboBox();
        clearButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        mainCategoriesLabel = new javax.swing.JLabel();
        subCategoriesLabel = new javax.swing.JLabel();
        attributesLabel = new javax.swing.JLabel();
        businessesLabel = new javax.swing.JLabel();
        locationLabel = new javax.swing.JLabel();
        searchForLabel = new javax.swing.JLabel();
        daysLabel = new javax.swing.JLabel();
        fromLabel = new javax.swing.JLabel();
        toLabel = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        resultsPane = new javax.swing.JPanel();
        resultsScrollPane = new javax.swing.JScrollPane();
        attributePanel = new javax.swing.JPanel();
        attributeList = new javax.swing.JScrollPane();
        subCategoryPanel = new javax.swing.JPanel();
        subCategoryList = new javax.swing.JScrollPane();
        mainCategoryPanel = new javax.swing.JPanel();
        mainCategoryList = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 102, 255));
        setLocation(new java.awt.Point(0, 0));

        guiPanel.setBackground(new java.awt.Color(0, 102, 255));

        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator1.setSize(new java.awt.Dimension(50, 50));

        searchFor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        searchFor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchForActionPerformed(evt);
            }
        });

        locationBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        locationBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationBoxActionPerformed(evt);
            }
        });

        daysBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        fromBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        toBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        mainCategoriesLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        mainCategoriesLabel.setText("Main Categories");

        subCategoriesLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        subCategoriesLabel.setText("Sub Categories");

        attributesLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        attributesLabel.setText("Attributes");

        businessesLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        businessesLabel.setText("Businesses");

        locationLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        locationLabel.setText("Location");

        searchForLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        searchForLabel.setText("Search For");

        daysLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        daysLabel.setText("Day of the Week");

        fromLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        fromLabel.setText("From");

        toLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        toLabel.setText("To");

        titleLabel.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        titleLabel.setText("Yelp Faceted Search");

        javax.swing.GroupLayout resultsPaneLayout = new javax.swing.GroupLayout(resultsPane);
        resultsPane.setLayout(resultsPaneLayout);
        resultsPaneLayout.setHorizontalGroup(
            resultsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resultsPaneLayout.createSequentialGroup()
                .addComponent(resultsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 657, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        resultsPaneLayout.setVerticalGroup(
            resultsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(resultsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 612, Short.MAX_VALUE)
        );

        attributePanel.setPreferredSize(new java.awt.Dimension(235, 35));

        javax.swing.GroupLayout attributePanelLayout = new javax.swing.GroupLayout(attributePanel);
        attributePanel.setLayout(attributePanelLayout);
        attributePanelLayout.setHorizontalGroup(
            attributePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(attributeList, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
        );
        attributePanelLayout.setVerticalGroup(
            attributePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(attributeList, javax.swing.GroupLayout.DEFAULT_SIZE, 609, Short.MAX_VALUE)
        );

        subCategoryPanel.setPreferredSize(new java.awt.Dimension(235, 35));

        subCategoryList.setSize(new java.awt.Dimension(205, 575));

        javax.swing.GroupLayout subCategoryPanelLayout = new javax.swing.GroupLayout(subCategoryPanel);
        subCategoryPanel.setLayout(subCategoryPanelLayout);
        subCategoryPanelLayout.setHorizontalGroup(
            subCategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(subCategoryList, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
        );
        subCategoryPanelLayout.setVerticalGroup(
            subCategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subCategoryPanelLayout.createSequentialGroup()
                .addComponent(subCategoryList, javax.swing.GroupLayout.PREFERRED_SIZE, 612, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        mainCategoryPanel.setName(""); // NOI18N
        mainCategoryPanel.setPreferredSize(new java.awt.Dimension(235, 35));

        mainCategoryList.setSize(new java.awt.Dimension(205, 575));

        javax.swing.GroupLayout mainCategoryPanelLayout = new javax.swing.GroupLayout(mainCategoryPanel);
        mainCategoryPanel.setLayout(mainCategoryPanelLayout);
        mainCategoryPanelLayout.setHorizontalGroup(
            mainCategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 218, Short.MAX_VALUE)
            .addGroup(mainCategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(mainCategoryList, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE))
        );
        mainCategoryPanelLayout.setVerticalGroup(
            mainCategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 612, Short.MAX_VALUE)
            .addGroup(mainCategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mainCategoryPanelLayout.createSequentialGroup()
                    .addComponent(mainCategoryList, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 14, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout guiPanelLayout = new javax.swing.GroupLayout(guiPanel);
        guiPanel.setLayout(guiPanelLayout);
        guiPanelLayout.setHorizontalGroup(
            guiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guiPanelLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(guiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainCategoriesLabel)
                    .addComponent(mainCategoryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(guiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(guiPanelLayout.createSequentialGroup()
                            .addGroup(guiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(searchFor, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(searchForLabel))
                            .addGap(18, 18, 18)
                            .addGroup(guiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(locationBox, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(locationLabel))
                            .addGap(27, 27, 27)
                            .addGroup(guiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(daysBox, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(daysLabel)))
                        .addGroup(guiPanelLayout.createSequentialGroup()
                            .addGroup(guiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(subCategoriesLabel)
                                .addComponent(subCategoryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(47, 47, 47))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(guiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, guiPanelLayout.createSequentialGroup()
                        .addComponent(attributePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87)
                        .addComponent(resultsPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(592, 592, 592))
                    .addGroup(guiPanelLayout.createSequentialGroup()
                        .addGroup(guiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(guiPanelLayout.createSequentialGroup()
                                .addComponent(attributesLabel)
                                .addGap(235, 235, 235)
                                .addComponent(businessesLabel))
                            .addGroup(guiPanelLayout.createSequentialGroup()
                                .addGroup(guiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fromLabel)
                                    .addGroup(guiPanelLayout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addComponent(fromBox, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(13, 13, 13)
                                .addGroup(guiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(toLabel)
                                    .addGroup(guiPanelLayout.createSequentialGroup()
                                        .addComponent(toBox, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(81, 81, 81)
                                        .addComponent(searchButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(clearButton)))))
                        .addGap(556, 958, Short.MAX_VALUE))))
            .addGroup(guiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 1711, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(guiPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(titleLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        guiPanelLayout.setVerticalGroup(
            guiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guiPanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(guiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mainCategoriesLabel)
                    .addComponent(subCategoriesLabel)
                    .addComponent(attributesLabel)
                    .addComponent(businessesLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(guiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainCategoryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 612, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subCategoryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 612, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(attributePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resultsPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addGroup(guiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(locationLabel)
                    .addComponent(searchForLabel)
                    .addComponent(daysLabel)
                    .addComponent(fromLabel)
                    .addComponent(toLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(guiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchFor, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(locationBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton)
                    .addComponent(clearButton)
                    .addComponent(daysBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(guiPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(guiPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        try {
            long start = System.nanoTime();
            updateBusinessResults();
            if (DEBUG) System.out.println("Display time: " + (System.nanoTime() - start)/1000000000.0);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Yelp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Yelp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // Business Results Table
        JTable businessTable = new JTable(new String[0][4], columnNames);
        resultsScrollPane.setViewportView(businessTable);
        resultsScrollPane.updateUI();

        try {
            clearSearchCriteria();
        } catch (ClassNotFoundException | SQLException | ParseException ex) {
            Logger.getLogger(Yelp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_clearButtonActionPerformed

    private void locationBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_locationBoxActionPerformed

    private void searchForActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchForActionPerformed
        // Update search for policy
        if (searchFor.getSelectedItem() == "OR") {
            searchForPolicy = "UNION";
        } else {
            searchForPolicy = "INTERSECT";
        }

        Connection conn = null;
        try {
            conn = connectToDB();
        } catch (ClassNotFoundException ex) {
        } catch (SQLException ex) {
        }

        // Update Faceted Search Results
        try {
            updateSubCategory(conn);
            updateAttribute(conn);
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Yelp.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(Yelp.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_searchForActionPerformed

    public void initMainCategories() throws SQLException {
        Connection connection = null;
        try {
            connection = connectToDB();
        } catch (ClassNotFoundException | SQLException e) {
            System.out.println("Error connecting to db: " + e);
            System.exit(-1);
        }
        Statement statement = connection.createStatement();
        String query = "SELECT DISTINCT category_name FROM Main_Categories ORDER BY category_name";
        ResultSet resultSet = statement.executeQuery(query);
        while (resultSet.next()) {
            JCheckBox category = new JCheckBox(resultSet.getString(1));
            category.setBackground(new Color(255,255,255));
            category.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    
                    // Update state of main category
                    if (category.isSelected()) {
                        selectedMainCategories.add(category.getText());
                    } else {
                        selectedMainCategories.remove(category.getText());
                    }
                    
                    long start = System.nanoTime();
                    Connection conn = null;
                    try {
                        conn = connectToDB();
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(Yelp.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(Yelp.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    // perform faceted search based on updated set of main categories
                    try {
                        updateSubCategory(conn);
                        updateAttribute(conn);
                        updateLocation(conn);
                        updateDays(conn);
                        updateFrom(conn);
                        updateTo(conn);
                        if (DEBUG_RUNTIME) System.out.println("Update time: " + (System.nanoTime() - start)/1000000000.0);
                    } catch (ClassNotFoundException | SQLException ex) {
                        Logger.getLogger(Yelp.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ParseException ex) {
                        Logger.getLogger(Yelp.class.getName()).log(Level.SEVERE, null, ex);
                    } finally {
                        try {
                            conn.close();
                        } catch (SQLException ex) {
                            Logger.getLogger(Yelp.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    
                }
            });
            mainCategoryItems.add(category);
        }
        mainCategoryItems.updateUI();
        connection.close();
    }
    
    public void updateSubCategory(Connection connection) throws ClassNotFoundException, SQLException {
        subCategoryItems.removeAll(); // clear items displayed on UI
        Set<String> newSelectedSubCategories = new HashSet<>(); // temporary set which is used for updating the selections
        
        if ( selectedMainCategories.isEmpty() == false){
            String query = "SELECT DISTINCT s.category_name FROM Sub_Categories s WHERE s.business_id IN(" + mainCategoryQuery() + ") ORDER BY s.category_name";
            if (DEBUG) System.out.println(query);
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(query);
            while(resultSet.next()){
                JCheckBox subCategory = new JCheckBox(resultSet.getString(1));
                
                // Retain all previously selected subcategories that are part of the new resultSet
                if(selectedSubCategories.contains(subCategory.getText())){
                    System.out.println("SubCategory " + subCategory.getText() + "was previously selected!");
                    subCategory.setSelected(true); // add checkmark in UI
                    newSelectedSubCategories.add(subCategory.getText()); // add to new list of selected sub categories 
                }
                subCategory.setBackground(new Color(255,255,255));
                subCategory.addItemListener(new ItemListener() {
                    @Override
                    public void itemStateChanged(ItemEvent e) {
                        if (subCategory.isSelected()) {
                            selectedSubCategories.add(subCategory.getText());
                        } else {
                            selectedSubCategories.remove(subCategory.getText());
                        }
                        long start = System.nanoTime();
                        Connection conn = null;
                        try {
                            conn = connectToDB();
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(Yelp.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (SQLException ex) {
                            Logger.getLogger(Yelp.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {
                            updateAttribute(conn);
                            updateLocation(conn);
                            updateDays(conn);
                            updateFrom(conn);
                            updateTo(conn);
                            if (DEBUG_RUNTIME) System.out.println("Update time: " + (System.nanoTime() - start)/1000000000.0);
                        } catch (ClassNotFoundException | SQLException ex) {
                            Logger.getLogger(Yelp.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (ParseException ex) {
                            Logger.getLogger(Yelp.class.getName()).log(Level.SEVERE, null, ex);
                        } finally {
                            try {
                                conn.close();
                            } catch (SQLException ex) {
                                Logger.getLogger(Yelp.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }

                    }
                });
                subCategoryItems.add(subCategory); // add sub category to UI
            }
            selectedSubCategories = newSelectedSubCategories; // update selected sub categories based on the new update
            subCategoryItems.updateUI(); 
        } else {
            selectedSubCategories.clear();
            subCategoryItems.updateUI();
        }
    }
    
    public void updateAttribute(Connection connection) throws ClassNotFoundException, SQLException {
        attributeItems.removeAll(); // clear items displayed on UI
        Set<String> newSelectedAttributes = new HashSet<>(); // temporary set which is used for updating the selections
        
        if (selectedMainCategories.isEmpty() == false && selectedSubCategories.isEmpty() == false){
            String querySubCategories = subCategoryQuery();
            String queryMainCategories = mainCategoryQuery();
            String business_ids = "";
            
            // Get business ids associated with main and sub categories. Account for case when no business ids are returned (only may happen for sub categories)
            if (queryMainCategories.isEmpty() == false && querySubCategories.isEmpty() == false){
                business_ids = "(" + queryMainCategories + ") INTERSECT (" + querySubCategories + ")";
            } else if (querySubCategories.isEmpty() == true){
                business_ids = queryMainCategories;
            } else {
                business_ids = querySubCategories;
            }
            
            String query = "SELECT DISTINCT A.attribute FROM Business_Attributes A WHERE A.business_id IN (" + business_ids + ") ORDER BY A.attribute";
            if (DEBUG) System.out.println(query);
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(query);
            while(resultSet.next()){
                JCheckBox attribute = new JCheckBox(resultSet.getString(1));
                
                // Retain all previously selected attributes that are part of the new resultSet
                if(selectedAttributes.contains(attribute.getText())){
                    attribute.setSelected(true); // add checkmark to UI
                    newSelectedAttributes.add(attribute.getText()); // add to new list of selected attributes 
                }
                attribute.setBackground(new Color(255,255,255));
                attribute.addItemListener(new ItemListener() {
                    @Override
                    public void itemStateChanged(ItemEvent e) {
                        if(attribute.isSelected()){
                            selectedAttributes.add(attribute.getText());
                        }else{
                            selectedAttributes.remove(attribute.getText());
                        }
                        
                        long start = System.nanoTime();
                        Connection conn = null;
                        try {
                            conn = connectToDB();
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(Yelp.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (SQLException ex) {
                            Logger.getLogger(Yelp.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {
                            updateLocation(conn);
                            updateDays(conn);
                            updateFrom(conn);
                            updateTo(conn);
                            if (DEBUG_RUNTIME) System.out.println("Update time: " + (System.nanoTime() - start)/1000000000.0);
                        } catch (ClassNotFoundException | SQLException ex) {
                            Logger.getLogger(Yelp.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (ParseException ex) {
                            Logger.getLogger(Yelp.class.getName()).log(Level.SEVERE, null, ex);
                        } finally {
                            try {
                                conn.close();
                            } catch (SQLException ex) {
                                Logger.getLogger(Yelp.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                });
                attributeItems.add(attribute); // add attribute to UI
            }
            selectedAttributes = newSelectedAttributes; // update selected attributes based on the new update
            attributeItems.updateUI();
        }else{
            selectedAttributes.clear();
            attributeItems.updateUI();
        }
    }
    
    public void updateLocation(Connection connection) throws ClassNotFoundException, SQLException {
        
        // Set empty combo box is no main categories selected
        if (selectedMainCategories.isEmpty() == true){
            locationBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"None"}));
            locationBox.setSelectedIndex(-1);
            return;
        }
        
        String query = "SELECT DISTINCT b.city, b.state FROM Businesses b WHERE b.business_id IN (";
        ArrayList<String> sub_queries = new ArrayList<>();
        String queryMainCategories = mainCategoryQuery();
        String querySubCategories = subCategoryQuery();
        String queryAttributes = attributeQuery();
        if (queryMainCategories.isEmpty() == false) sub_queries.add(queryMainCategories);
        if (querySubCategories.isEmpty() == false) sub_queries.add(querySubCategories);
        if (queryAttributes.isEmpty() == false) sub_queries.add(queryAttributes);
        
        Iterator<String> it = sub_queries.iterator();
        if (!it.hasNext()){ // TODO: FIX THIS
            query = query + "'')";
        }else {
            query = query + it.next(); 
        }
        
        while(it.hasNext()){
            query = query + " INTERSECT " + it.next();
        }
        query = query + ") ORDER BY b.state";
        
        if (DEBUG) System.out.println(query);
        
        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery(query);
        Vector locations = new Vector();
        while(resultSet.next()){
            locations.add(resultSet.getString(1) + ", " + resultSet.getString(2));
        }
        locationBox.setModel(new javax.swing.DefaultComboBoxModel(locations));
        locationBox.setSelectedIndex(-1);
    }
    
    public void updateDays(Connection connection) throws ClassNotFoundException, SQLException {
        
        // Set empty combo box is no main categories selected
        if (selectedMainCategories.isEmpty() == true){
            daysBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"None"}));
            daysBox.setSelectedIndex(-1);
            return;
        }
        
        String query = "SELECT DISTINCT d.day FROM Days_Open d WHERE d.business_id IN (";
        ArrayList<String> sub_queries = new ArrayList<>();
        String queryMainCategories = mainCategoryQuery();
        String querySubCategories = subCategoryQuery();
        String queryAttributes = attributeQuery();
        if (queryMainCategories.isEmpty() == false) sub_queries.add(queryMainCategories);
        if (querySubCategories.isEmpty() == false) sub_queries.add(querySubCategories);
        if (queryAttributes.isEmpty() == false) sub_queries.add(queryAttributes);
        
        Iterator<String> it = sub_queries.iterator();
        if (!it.hasNext()){ // TODO: FIX THIS
            query = query + "'')";
        }else {
            query = query + it.next(); 
        }
        
        while(it.hasNext()){
            query = query + " INTERSECT " + it.next();
        }
        query = query + ")";
        
        if (DEBUG) System.out.println(query);

        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery(query);
        Vector days = new Vector();
        while(resultSet.next()){
            days.add(resultSet.getString(1));
        }
        daysBox.setModel(new javax.swing.DefaultComboBoxModel(days));
        daysBox.setSelectedIndex(-1);
    }
    
    public void updateFrom(Connection connection) throws ClassNotFoundException, SQLException{
        // Set empty combo box is no main categories selected
        if (selectedMainCategories.isEmpty() == true){
            fromBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"None"}));
            fromBox.setSelectedIndex(-1);
            return;
        }
        
        String query = "SELECT DISTINCT d.open FROM Days_Open d WHERE d.business_id IN (";
        ArrayList<String> sub_queries = new ArrayList<>();
        String queryMainCategories = mainCategoryQuery();
        String querySubCategories = subCategoryQuery();
        String queryAttributes = attributeQuery();
        if (queryMainCategories.isEmpty() == false) sub_queries.add(queryMainCategories);
        if (querySubCategories.isEmpty() == false) sub_queries.add(querySubCategories);
        if (queryAttributes.isEmpty() == false) sub_queries.add(queryAttributes);
        
        Iterator<String> it = sub_queries.iterator();
        if (!it.hasNext()){ // TODO: FIX THIS
            query = query + "'')";
        }else {
            query = query + it.next(); 
        }
        
        while(it.hasNext()){
            query = query + " INTERSECT " + it.next();
        }
        query = query + ") ORDER BY d.open";
        
        if (DEBUG) System.out.println(query);

        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery(query);
        Vector open = new Vector();
        String date = "";
        while(resultSet.next()){
            date = resultSet.getString(1);
            date = date.split(" ")[1].split("\\.")[0]; // Get time only --> HH:mm:ss
            date = date.substring(0, date.length()-3); //Strip away seconds --> HH:mm
            open.add(date);
        }
        fromBox.setModel(new javax.swing.DefaultComboBoxModel(open));
        fromBox.setSelectedIndex(-1);
    }
    
    public void updateTo(Connection connection) throws ClassNotFoundException, SQLException, ParseException{
        // Set empty combo box is no main categories selected
        if (selectedMainCategories.isEmpty() == true){
            toBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"None"}));
            toBox.setSelectedIndex(-1);
            return;
        }
        
        String query = "SELECT DISTINCT d.close FROM Days_Open d WHERE d.business_id IN (";
        ArrayList<String> sub_queries = new ArrayList<>();
        String queryMainCategories = mainCategoryQuery();
        String querySubCategories = subCategoryQuery();
        String queryAttributes = attributeQuery();
        if (queryMainCategories.isEmpty() == false) sub_queries.add(queryMainCategories);
        if (querySubCategories.isEmpty() == false) sub_queries.add(querySubCategories);
        if (queryAttributes.isEmpty() == false) sub_queries.add(queryAttributes);
        
        Iterator<String> it = sub_queries.iterator();
        if (!it.hasNext()){ // TODO: FIX THIS
            query = query + "'')";
        }else {
            query = query + it.next(); 
        }
        
        while(it.hasNext()){
            query = query + " INTERSECT " + it.next();
        }
        query = query + ") ORDER BY d.close";
        
        if (DEBUG) System.out.println(query);
        
        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery(query);
        Vector close = new Vector();
        String date = "";
        while(resultSet.next()){
            date = resultSet.getString(1);
            date = date.split(" ")[1].split("\\.")[0]; // Get time only --> HH:mm:ss
            date = date.substring(0, date.length()-3); //Strip away seconds --> HH:mm
            close.add(date);
        }
        toBox.setModel(new javax.swing.DefaultComboBoxModel(close));
        toBox.setSelectedIndex(-1);
    }
    
    public void updateBusinessResults() throws ClassNotFoundException, SQLException{
        // Set empty table if no main_categories selected
        if (selectedMainCategories.isEmpty() == true){
            JTable businessTable = new JTable(new String[0][4], columnNames);
            resultsScrollPane.setViewportView(businessTable);
            resultsScrollPane.updateUI();
            return;
        }
        
        String query = "SELECT b.business_name, b.city, b.state, b.stars, b.business_id FROM Businesses b WHERE b.business_id IN(";
        ArrayList<String> sub_queries = new ArrayList<>();
        String queryMainCategories = mainCategoryQuery();
        String querySubCategories = subCategoryQuery();
        String queryAttributes = attributeQuery();
        if (queryMainCategories.isEmpty() == false) sub_queries.add(queryMainCategories);
        if (querySubCategories.isEmpty() == false) sub_queries.add(querySubCategories);
        if (queryAttributes.isEmpty() == false) sub_queries.add(queryAttributes);
        if (locationBox.getSelectedItem() != null){
            sub_queries.add(locationQuery());
        }
        if (daysBox.getSelectedItem() != null) {
            sub_queries.add(daysOpenQuery());
        }
        if (fromBox.getSelectedItem() != null && toBox.getSelectedItem() != null){
            sub_queries.add(timeOpenQuery());
        }
        
        Iterator<String> it = sub_queries.iterator();
        if (!it.hasNext()){ // TODO: FIX THIS
            query = query + "'')";
        }else {
            query = query + "(" + it.next() + ")"; 
        }
        
        while(it.hasNext()){
            query = query + " INTERSECT (" + it.next() + ")";
        }
        query = query + ") ORDER BY b.business_name";
        
        if (DEBUG) System.out.println(query);
        
        Connection connection = connectToDB();
        Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
        ResultSet resultSet = statement.executeQuery(query);
        resultSet.last();
        if (DEBUG) System.out.println("Num Rows: " + resultSet.getRow());
        String[][] businesses = new String[resultSet.getRow()][columnNames.length];
        String[] business_ids = new String[resultSet.getRow()];
        resultSet.beforeFirst();
        int i = 0;
        while(resultSet.next()){
            businesses[i][0] = resultSet.getString(1);
            businesses[i][1] = resultSet.getString(2);
            businesses[i][2] = resultSet.getString(3);
            businesses[i][3] = resultSet.getString(4);
            business_ids[i] = resultSet.getString(5);
            i++;
            
        }
  
        // Business Results Table
        JTable businessTable = new JTable(businesses, columnNames);
        businessTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e){
                super.mouseClicked(e);
                int index = businessTable.getSelectedRow();
                try {
                    display_business_reviews(business_ids[index]);
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(Yelp.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });
        resultsScrollPane.setViewportView(businessTable);
        resultsScrollPane.updateUI();
        connection.close();
        
    }
    
    public void display_business_reviews(String business_id) throws ClassNotFoundException, SQLException {
        String query = "SELECT r.publish_date, r.stars, r.text, u.name FROM Reviews r, Users u WHERE r.author = u.user_id AND r.business_id = '" + business_id + "'";
        if (DEBUG) System.out.println(query);
        Connection connection = connectToDB();
        Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
        ResultSet resultSet = statement.executeQuery(query);
        String[] columnNames = {"ReviewDate", "Stars", "Review Text", "Author",};
        resultSet.last();
        String[][] results = new String[resultSet.getRow()][4];
        resultSet.beforeFirst();
        int i = 0;
        while(resultSet.next()){
            results[i][0] = resultSet.getString(1).split(" ")[0];
            results[i][1] = resultSet.getString(2);
            results[i][2] = resultSet.getString(3);
            results[i][3] = resultSet.getString(4);
            i++;
        }
        
        // Screen dimensions -- display popup at center of screen
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Dimension screenSize = toolkit.getScreenSize();
        int width = screenSize.width/2;
        int height = screenSize.height/2;
        int x = width - (width/2);
        int y = height - (height/2);
        
        // popup frame
        JFrame reviewsFrame = new JFrame();
        reviewsFrame.setSize(width, height);
        reviewsFrame.setTitle("Reviews");
        reviewsFrame.setLocation(x, y);
        JPanel reviewsPanel = new JPanel();
        reviewsPanel.setLayout(new BorderLayout());

        // Place review table in the popup window
        JTable reviewsTable = new JTable(results, columnNames);
        JScrollPane reviewsPane = new JScrollPane(reviewsTable);
        reviewsPane.setPreferredSize(new Dimension(800, 600));
        reviewsPane.setBackground(new Color(-1));

        reviewsPanel.add(reviewsPane, BorderLayout.CENTER);
        reviewsFrame.add(reviewsPanel);
        reviewsFrame.setVisible(true);
        
    }
    
    public String mainCategoryQuery(){
        String query = "";
        String s = "";
        Iterator<String> it = selectedMainCategories.iterator();
        // Get first main category
        if (!it.hasNext()){
            return query;
        }else{
            s = "(SELECT m.business_id FROM Main_Categories m WHERE m.category_name = '" + it.next() + "')";
            query = query + s;
        }
        
        // Iterate over the remaining categories
        while(it.hasNext()){
            query = query + " " + searchForPolicy + " (SELECT m.business_id FROM Main_Categories m WHERE m.category_name = '" + it.next() + "')";
        }

        return query;
    }
    
    public String subCategoryQuery(){
        String query = "";
        String s = "";
        Iterator<String> it = selectedSubCategories.iterator();
        // Get first sub category
        if (!it.hasNext()){
            return query;
        }else{
            s = "(SELECT s.business_id FROM Sub_Categories s WHERE s.category_name = '" + it.next() + "')";
            query = query + s;
        }
        
        // Iterate over the remaining sub categories
        while(it.hasNext()){
            query = query + " " + searchForPolicy + " (SELECT s.business_id FROM Sub_Categories s WHERE s.category_name = '" + it.next() + "')";
        }
        return query;
    }
    
    public String attributeQuery(){
        String query = "";
        String s = "";
        Iterator<String> it = selectedAttributes.iterator();
        // Get first sub category
        if (!it.hasNext()){
            return query;
        }else{
            s = "(SELECT a.business_id FROM Business_Attributes a WHERE a.attribute = '" + it.next() + "')";
            query = query + s;
        }
        
        // Iterate over the remaining sub categories
        while(it.hasNext()){
            query = query + " " + searchForPolicy + " (SELECT a.business_id FROM Business_Attributes a WHERE a.attribute = '" + it.next() + "')";
        }
        return query;
    }
    
    public String locationQuery(){
        if (locationBox.getSelectedItem() == null){
            return null;
        }
        String location = (String) locationBox.getSelectedItem();
        String city = location.split(", ")[0];
        String state = location.split(", ")[1];
        String query = "(SELECT b.business_id FROM Businesses b WHERE b.city = '" + city + "' AND b.state = '" + state + "')";
        if (DEBUG) System.out.println(query);
        return query;
    }
    
    public String daysOpenQuery(){
        if (daysBox.getSelectedItem() == null){
            return null;
        }
        String day = (String) daysBox.getSelectedItem();
        String query = "(SELECT d.business_id FROM Days_Open d WHERE d.day = '" + day + "')";
        if (DEBUG) System.out.println(query);
        return query;
    }
    
    public String timeOpenQuery(){
        if (fromBox.getSelectedItem() == null || toBox.getSelectedItem() == null){
            return null;
        }
        String from = (String) fromBox.getSelectedItem();
        String to = (String) toBox.getSelectedItem();

        String query = "(SELECT d.business_id FROM Days_Open d WHERE d.open >= TO_DATE('1970-01-01 " + from + "', 'YYYY-MM-DD HH24:MI') AND d.close <= TO_DATE('1970-01-01 " + to + "', 'YYYY-MM-DD HH24:MI'))";
        if (DEBUG) System.out.println(query);
        return query;
    }
    
    public void clearSearchCriteria() throws ClassNotFoundException, SQLException, ParseException{
        JCheckBox component;
        for (int i = 0; i < mainCategoryItems.getComponentCount(); i++){
            component = (JCheckBox) mainCategoryItems.getComponent(i);
            component.setSelected(false);
        }
        selectedMainCategories.clear();
        Connection conn = connectToDB();
        updateSubCategory(conn);
        updateAttribute(conn);
        updateLocation(conn);
        updateDays(conn);
        updateFrom(conn);
        updateTo(conn);
        conn.close();
    }
    
    public static Connection connectToDB()throws ClassNotFoundException, SQLException {
        Class.forName(JDBC_DRIVER);
        Connection connection = DriverManager.getConnection(DB_URL, USERNAME, PASSWORD);
        return connection;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Yelp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Yelp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Yelp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Yelp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Yelp().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(Yelp.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
        
    }

    // DB information
    private static final String JDBC_DRIVER = "oracle.jdbc.driver.OracleDriver";
    private static final String DB_URL = "jdbc:oracle:thin:@localhost:1521:xe";
    private static final String USERNAME = "system";
    private static final String PASSWORD = "oracle";
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane attributeList;
    private javax.swing.JPanel attributePanel;
    private javax.swing.JLabel attributesLabel;
    private javax.swing.JLabel businessesLabel;
    private javax.swing.JButton clearButton;
    private javax.swing.JComboBox daysBox;
    private javax.swing.JLabel daysLabel;
    private javax.swing.JComboBox fromBox;
    private javax.swing.JLabel fromLabel;
    private javax.swing.JPanel guiPanel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox locationBox;
    private javax.swing.JLabel locationLabel;
    private javax.swing.JLabel mainCategoriesLabel;
    private javax.swing.JScrollPane mainCategoryList;
    private javax.swing.JPanel mainCategoryPanel;
    private javax.swing.JPanel resultsPane;
    private javax.swing.JScrollPane resultsScrollPane;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox searchFor;
    private javax.swing.JLabel searchForLabel;
    private javax.swing.JLabel subCategoriesLabel;
    private javax.swing.JScrollPane subCategoryList;
    private javax.swing.JPanel subCategoryPanel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JComboBox toBox;
    private javax.swing.JLabel toLabel;
    // End of variables declaration//GEN-END:variables
    
    private javax.swing.JPanel mainCategoryItems;
    private javax.swing.JPanel subCategoryItems;
    private javax.swing.JPanel attributeItems;
    
    // Sets for keeping track of selections made by user
    private Set<String> selectedMainCategories = new HashSet<>();
    private Set<String> selectedSubCategories = new HashSet<>();
    private Set<String> selectedAttributes = new HashSet<>(); 
    
    // Search for policy
    private String searchForPolicy;
    
    // Business Table column names
    private String[] columnNames = {"Business", "City", "State", "Stars"};
    
    public static final boolean DEBUG = false;
    public static final boolean DEBUG_RUNTIME = false;
    
}
